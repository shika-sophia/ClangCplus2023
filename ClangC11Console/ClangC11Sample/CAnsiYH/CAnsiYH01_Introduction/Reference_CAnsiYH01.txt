*@directory ClangC11Console / ClanC11Sample / CAnsiYH / CAnsiYH01_Introduction
*@fileName  Reference_CAnsiYH01.txt
*@reference C99YH    結城 浩 『C言語プログラミングレッスン [入門編] 第３版』SB Creative, 2019
*@reference CAnsiYH  結城 浩 『C言語プログラミングレッスン [文法編] 新版』  SB Creative, 2006
*@reference C11DS    arton  『独習 C 新版』翔泳社, 2018
*
*@content CAnsiYH Chapter 01  Introduction / p2

*@summary Reference_CAnsiYH01.txt
          Definition of words

*@English [E] specification: 仕様、規格
          [E] standard:      標準、規格
          [E] shortage:      不足、足りないこと
          [P] operator:      演算子
          [P] qualifier:     修飾子
          [E] implicit:      暗黙的  <->  explicit:  明示的
          [M] modulus:       剰余  reminder, rest
          [M] Logarithm:     対数  log

*@subject ◆Compile  〔CAnsiYH p2〕
*         ＊File
*         ・Source File: extention [.c]: 
*             A document file described with following C language grammer.
*
*         ・Header File: extention [.h]: 
*             A document file default or self-defined described the declaration and definition of some Functions.
*
*         ・Standard Header File:
*             Especally, Header Files default-defined by specification of C language Standard as like C-Ansi, C99, or C11.
*
*         ・Object File: extention [.obj] (for Windows) | [.o] (for UNIX) / These extentions depend on Compiler.
*             A Binary File yielded by Compiler which convert Source File and Header File to Binary File.
*             'Binary' means a signal expressed by 0 and 1. 
*
*         ・Library File: extention [???]
*             Files as like Header File, exclusive-defined file, or Functions.
*
*         ・Execute File: extention [.exe] (for Windows)
*
*         ＊Compile: (wide sense) These processes or to do these, below
*         ・Pre-processor:
*             A program which parse '#' Directive and do the order, before narrow-sense Compile below.
*             
*             [Example]
*             #include <xxxx.h> 
*                Load the Header File and storage it on Memory.
*
*             #define NAME 0
*                Source File define self-defined string text as constant value.
*                Preprocessor substitute it to constant value in whole of file after there.
*
*         ・Compiler: (narrow sense)
*             A program which parse Source File, Header File, and Standard Header File,
*             which check out Error depending on C language grammer,
*             convert them to Binary, and yield Object File.             
*             
*         ・Linker:
*             A program which yield Execute File with linkage Object File and Library File.
*
*         【Notation】
*          ANSI Standard does not describe about how to use Compiler and Linker,
*          It do "Refer to the Specification Manual of Compiler" only.
*          Actually, the usage is various, depending on Compiler.
*
*@subject ◆Divided Compile => 〔C99YH08_Function\MainDividedCompileSample.c〕
*         In C language, You can divide parts of Source File, can compile each files,
*         and can link them to yield an integrated Execute File designed by necessary files only.
*
*         [more Merit] of Divided Compile
*         ・can share works
*         ・can be easy to read and manage Source File.
*         ・can partly compile modified-files only.
*
*@subject ◆What describe in Source File and Header File
          ＊Both
          ・'#' Directive for Preprocessor
          ・Declaration of Prototype
          ・Definition of Type, using operator 'typedef'
          ・Comment
          
          ＊Header File:
          ・Declaration of Function
          ・Declaration of Variable

          ＊Source File:
          ・Declaration and Definition of Function
          ・Declaration and Definition of Variable

          【Notation】
           Compiler does not distinguish to read Source File and Header File.
           But, as Programming Style or Custom, there is a protocol that
           "Don't write Definition of Function and Variable in Header File".

           Definition of them actually build (= make) the Memory.
           Header File is refered from multi-files by using '#include'.
           Therefore, we should not write Definiton of them in Header File to prevent Memory shortage.

*@subject ◆Comment-out
          Compiler recognize them as white-space.

          [Example]
          /* (multi-lines) */    before [C ANCI]
          // (one line)          after  [C99][C++]

*@subject ◆Variable =>〔C99YH03_Variable\MainNumericTypeRange.c〕
          ＊Type
          ・char:  character, String text is defined as array of char 'char[]'.
            char, signed char, unsigned char
            
          ・int   integer
            short, int, long, long long, signd short, unsigned short, signed int, unsigned int, unsigned long, unsigned long long
          
          ・float, double, long double
          ・array
          ・enum  enumeration
          ・struct
          ・union

          ＊Memory Class: qualifier to make storage where in Memory
          ・static: internal of the Source File only
          ・extern: external of the Source File 
          ・auto:
          ・register:

*@subject ◆Function
          ＊main(): specific Function meaning Entry Point of Execute.
          ＊Argument: 
             A value, values, or nothing, which you give to a function, when call it.
             In the Function, Argument define the Type and Identifer (= Variable name) of local Variable.

          ＊Return-Type: Return-Value:
             A value as Return-Type which the Function operate and return to origin of calling itself.
             If Return-Value is nothing, write 'void' as Return-Type.
             By Statement 'return xxxx;', it return the value, or (in 'void' case) by 'return;' it return the control.
                   
          ＊Declaration:
             A description which Program tell OS (= Operating System) to use a Function 
             of Identifer (= Function name), Argument Type, number of Argument, and Return-Type.
             (They are called "Signature of Function", because they is used to identify or distinguish Function)

             It is required to be written, before Call.

          ＊Definition:
             A description which Program define its behavior of operation, adding them of Declaration.

          ＊Call Function:
             To use a Function with giving Argument and assigning Return-Value.

*@subject ◆Statement
          ＊Statement: A minimum unit of execution, expressed by ';' of termination.
          ＊multi-Statement: 
              Multi statements are recognaized as one, by being expressed by bracket '{ }'.
          ＊Conditional Branch -- if-else, switch
          ＊Iteration          -- for, while, do-while
          ＊Jump               -- goto, named-label

*@subject ◆Expression: A minimum unit of calculation
          ＊Type-Change impicitly 
            
          ＊Calculation of Add, Subtract, Multiple, Divide,and Modulus (= rest of Divide calculation),
            expressed by Operator [ + ] [ - ] [ * ] [ / ] [ % ].

          ＊Caluculation of Bit
            expressed by Operator:  OR [ | ],  AND [ & ], exclusive OR [ ^ ],  NOT [ ~ ]
                                                           └ (A OR B) - (A AND B)
          ＊Judgement of Logic
            expressed by Logical Operator: Logical OR [ || ], Logical AND [ && ], Logical NOT [ ! ]

          ＊<math.h>
              The Standard Header File which define Triangle Function, Logarithm, or else Matematical Functions.

*@see
*@author  shika
*@date    2023-01-15
*/ 