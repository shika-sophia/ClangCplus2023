/**
*@directory ClangC11Console / ClanC11Sample / CAnsiYH / CAnsiYH02_Basic
*@fileName  Reference_CAnsiYH02.txt
*@copyFrom  MainAsciiCharacterViewer.c
*@copyFrom 
*@reference C99YH    結城 浩 『C言語プログラミングレッスン [入門編] 第３版』SB Creative, 2019
*@reference CAnsiYH  結城 浩 『C言語プログラミングレッスン [文法編] 新版』  SB Creative, 2006
*@reference C11DS    arton  『独習 C 新版』翔泳社, 2018
*@author    shika
*@date      2023-01-17
*/ 

*@content CAnsiYH Chapter 2  Basic | ASCII Character / List 2-0 / p13
*@summary MainAsciiCharacterViewer.c

*@English [M] exponent:   指数
          [M] integer:    整数
          [P] floating-point number: 浮動小数点数
          [M] fraction:   小数分数, 割合, わずか, 端数, 小数, 一部分
          [E] opposite:   反対の
          [E] similar:    似ている、同じような
          [E] quote:      引用する
          [E] correspond: 対応する、一致する
          [E] specification: 仕様
          [P] identifier: 識別子
          [P] operator:   演算子
          [P] qualifier:  修飾子
          [P] declaration: プロトタイプ宣言
          [P] definition:  定義 (関数、変数など)
          [P] concealment: 隠蔽

*@subject ■ Character
*         ◆ASCII Code Chart〔C99YH 0A | p435〕
*         I drew it as similar, below.
*         It is opposite Horizontal and Vertical Axis to Chart of〔C99YH 0A〕
* 
*         The usage of Chart that you can know this charater code value (16-decimal), 
*         by adding both value of Horizontal and Vertical.
* 
*         You can do output to Console, by using 'printf()'
* 
*         [Example]
*         int c;             It should be defined as 'int', not 'char'.
*         printf("%X", c);   %X or %x show 16-decimal value.
*         printf("%d", c);   %d show 10-decimal value.
*         printf("%c", c);   %c show character.

◆ASCII Code Chart (Edited) 〔C99YH 0A | p435〕〔MainAsciiCharacterViewer.c〕
--------------------------------------------------------------------------------------
| -- | 00 | 01 | 02 | 03 | 04 | 05 | 06 | 07 | 08 | 09 | 0A | 0B | 0C | 0D | 0E | 0F |
|----|----|----|----|----|----|----|----|----|----|----|----|----|----|----|----|----|
| 00 | NUL| SOH| STX| ETX| EOT| ENQ| ACK| BEL| BS | HT | LF | VF | FF | CR | SO | SI |
| 10 | DLE| DC1| DC2| DC3| DC4| NAK| SYN| ETB| CAN| EM | SUB| ESC| FS | GS | RS | US |
| 20 | SP |  ! |  " |  # |  $ |  % |  & |  ' |  ( |  ) |  * |  + |  , |  - |  . |  / |
| 30 |  0 |  1 |  2 |  3 |  4 |  5 |  6 |  7 |  8 |  9 |  : |  ; |  < |  = |  > |  ? |
| 40 |  @ |  A |  B |  C |  D |  E |  F |  G |  H |  I |  J |  K |  L |  M |  N |  O |
| 50 |  P |  Q |  R |  S |  T |  U |  V |  W |  X |  Y |  Z |  [ |  \ |  ] |  ^ |  _ |
| 60 |  ` |  a |  b |  c |  d |  e |  f |  g |  h |  i |  j |  k |  l |  m |  n |  o |
| 70 |  p |  q |  r |  s |  t |  u |  v |  w |  x |  y |  z |  { |  | |  } |  ~ | DEL|
--------------------------------------------------------------------------------------

◆Non-Characters (Edited) 〔C99YH 0A | p435〕〔MainAsciiCharacterViewer.c〕
  〔ReferenceDocument\Article_AsciiCode_Clanguage.txt〕
ASCII
[16-decimal] (10-decimal) Abbreviation: Meaning [''] Escape-Sequence
[00] (  0) NUL: NULL Character '\0'
[01] (  1) SOH: Start of Header
[02] (  2) STX: Start of Text
[03] (  3) ETX: End of Text
[04] (  4) EOT: End of Transfer
[05] (  5) ENQ: End of Quote (= Reference from others)
[06] (  6) ACK: Accept OK
[07] (  7) BEL: Bell (= Beep)  '\a'
[08] (  8) BS:  Back Space     '\b'
[09] (  9) HT:  Horizontal Tab '\t'
[0A] ( 10) LF:  Line Feed      '\n' (new line)
[0B] ( 11) VT:  Vertical Tab   '\v'
[0C] ( 12) FF:  Form Feed      '\f' (new page)
[0D] ( 13) CR:  Carrige Return '\r' (return left)
[0E] ( 14) SO:  Shift out
[0F] ( 15) SI:  Shift in
[10] ( 16) DLE: Data Link Escape
[11] ( 17) DC1: Device Control 1
[12] ( 18) DC2: Device Control 2
[13] ( 19) DC3: Device Control 3
[14] ( 20) DC4: Device Control 4
[15] ( 21) NAK: NG Accept (= Failure of Accept)
[16] ( 22) SYN: Synchronize
[17] ( 23) ETB: End of Transfer Block
[18] ( 24) CAN: Cancel
[19] ( 25) EM:  End of Media
[1A] ( 26) SUB: Substitute
[1B] ( 27) ESC: Escape Character  '\' (UNIX) or '¥' (Windows)
[1C] ( 28) FS:  Form Separetor   (= Delimiter)
[1D] ( 29) GS:  Group Separetor  (= Delimiter)
[1E] ( 30) RS:  Record Separetor (= Delimiter)
[1F] ( 31) US:  Unit Separetor   (= Delimiter)
[20] ( 32) SP:  white-space
  :
[7F] (127) DEL: Delete [DEL]

*@subject ◆Character Code 〔C99YH p266〕〔MainAsciiCharacterViewer.c〕
*         It is defined corresponding Binary which is recognizable for Machine, to Character which is recognizable for Human.
*         There are some kinds of Character Code as below.
* 
*         ASCII: Character code default-defined by the specification of C language,
*                depending on Compiler.
* 
*         UTF-8: (Unicode):
*                Character code of most popular in the world,
*                which almost supports main languages;
*                including ASCII, 2Bytes Character, Japanese, Arabic, Hebrew, Greek, or Kiril etc...
* 
*         ECU:   (Latin1): 
*                Character code for UNIX: alphabet, numeric, symbol charater only, 
*                but including pronounce-characters and accent-characters of European languages, Euro currency mark too.
*                Probably, Git-Hub automatically may judge Character-Code as ECU.
*                It might change Non-Characters and Japanese to [?].
*                Visual Studio (UTF-8) shows correctly.
* 
*         Shift-JIS: (windows-31J, CP932):
*                Character code for Japanese, as Windows default in Japan.


*@content CAnsiYH Chapter 2  Basic / p13-p32
*@summary Reference_CAnsiYH02.txt
*@subject ◆Not using characters in C language. 〔CAnsiYH p15〕
          $, @, ` (back Quate)
          @: sometimes use to express an unique extended specification.

*@subject ◆White-Space: Compiler recognize these as white-space. 〔CAnsiYH p15〕
          ・white-space
          ・Line Feeds  '\n', '\r', '\f'
          ・Tab         '\t', '\v'
          ・Comment-out /* */, //

          (Excluding white-space in constant value of 'char', it is used as delimiter.)
          (Excliding white-space in String text expressed with "")
          (Excluding "　" Blank of 2 Bytes character (= wide character))

*@subject ◆Connector [ \ ] of two Lines 〔CAnsiYH p15〕
          If you write with '\' at termination of the line,
          Compiler recognize two lines of previous and next '\', as one line.
          
          [Example] 〔CAnsiYH p253〕
          #define DPRINT(x) \
          if (debug) { \
              printf( ... ); \
              printf( ... ); \
          }

*@subject ◆Comment-out 〔CAnsiYH p6, p16〕
          ・Compiler recognize comment as white-space.
          ・It do not '/*' or '*/' in char constant or String text, as comment. 
          ・Don't nest comments, it do '*/' as end of comment.
          ・By using '#if' Directive, you can make them out of program, even including comment-out.
            In this way, Pre-processor replase them from # to #, to white-space.
          ・Don't forget terminating comment '*/', that sometimes can be serious bug as like eternal-loop.

          [Format]
          /* (multi-lines) */            // before [C ANCI]
          // (one line)                  // after  [C99][C++]
          #if 0  (multi-lines)  #endif   

          [×] /* 123 /* 456 */ 789 */   Because first '*/' means end of comment, the '789' is out of comment,
                                        second '*/' is thrown Compile Error.

*@subject ◆Token 〔CAnsi p17〕
          Token: A minimum unit, 
          which Compiler divide source code of program to the unit
          and it operate the unit one by one. 

          Token categorize them:
          ・Operator as like [+ - * / % += &&] etc..
          ・Delimiter as like () {} . ; etc..
          ・Constant Value as like 123, '\n'.
          ・String Literal as like "Hello".
          ・Identifer as name of Function, Variable and Struct.
          ・Reserved words by specification of C language. => 〔C99YH 0C | p442〕

*@subject ◆Suffix (and Prefix) for expessing the Literal type 〔CAnsiYH p15〕, see below〔◆Constant Value〕
          f, F:  Floating-point numbers (10-decimal Expression),  as like '3.1415'
          e, E:  Floating-point numbers (Exponential Expression), as like '1,17e+306
          l, L:  'long int' with integer, 'long double' with fruction.  (※ below)
          u, U:  unsigned (= not defined '+', '-' )
          (Prefix) L: wide-character 'wchar_t' as like 2 Bytes character (= wide character), as like L'漢', L'字'.

          [×] d, D:  (not existed for double suffix). It should be defined as like 'double d = 0.0;'

          ※ "l, 1, I, i, | " are likely to be confused. So should use 'L', not 'l'.

          ※ Font [ Consolas ] in Windows default Font, can obviously distiguish these confusable characters,
             as like [0 o O] [l 1 I i, |] [. , ; :].  ( <- After changing Font of your environment, See here.)
             It seems for me to be appropriate for a Programmer Font, I usually use this.
             But if you use [Consolas] with 2 Bytes character (= wide character)s, because it is based on ECU (Latin1),
             2 Bytes character (= wide character)s are expressed as MS-Gothic, which cannot distinguish wide-characters of [0 O] [０ Ｏ] as well.

*@subject ■ Constant Value (= Literal)〔CAnsiYH p18〕
          ＊[Integer constant]
          ・Literal of Integer can be written as 16-decimal (hexa-decimal), 10-decimal (decimal), 8-decimal (octa-decimal) in C language.
          ・2-decimal (binary) cannot be written.
          ・Each are expressed as:
            16-decimal: Literal with Prefix '0x' as like 0xFF. 
            10-decimal: Literal with no Prefix   as like 255.
            8-decimal:  Literal with Prefix '0'  as like 030.
          ・Therefore, '0' is always expessed as 8-decimal.
          ・In 16-decimal case, we can write with extra-'0' before value,
            for expressing some sense or being readable, as like 0x001C.
          ・But in 10-decimal case, if you write with extra-'0' before value, the Literal change its value,
            because Prefix '0' means 8-decimal as above.
          ・Suffix 'U' or 'L' means 'unsigned' or 'long' as above 〔◆Suffix〕

          ＊[Floating-point Number conatant]
          ・Integer part or Fraction part can be omited either one of them.
          ・[ . ] or [ e ] can be ommited either one of them.
          ・Suffix express each types: (and see above 〔◆Suffix〕)
            f, F:        float
            (no Suffix): double
            l, L:        long double

          [Format]
          (integer part) . (fraction part) e (exponent part) [Suffix]

          [Example] Their values express the same value.
          123e2, 123E2, 123.e2, 1.23e4, 0.123e5, .123e5

          ＊[Chararcter constant]
          ・One character Literal is expressed enclosing by single quote [' '] .
          ・Multi-character Literal as String text is expressed enclosing by double quote [" "]. (see below〔◆String text〕)
          ・Eacape-Sequence are char Literal below, too.

          ＊[Wide Extended Character constant] (depending on Comiler)
          ・Type 'wchar_t' means this expressed by Suffix L'漢'.
          ・But the author of CAnsiYH said, "I ever have not much seen that".
          
*@subject ◆Eacape-Sequence 〔CAnsiYH p20〕〔C99YH 0D | p436〕
          ＊ASCII corresponding them:
          [0x00] (  0) NUL: NULL Character   '\0'
          [0x07] (  7) BEL: Bell (= Beep)    '\a' (alert, alarm)
          [0x08] (  8) BS:  Back Space       '\b' (※ below)
          [0x09] (  9) HT:  Horizontal Tab   '\t'
          [0x0A] ( 10) LF:  Line Feed        '\n' (new line)
          [0x0B] ( 11) VT:  Vertical Tab     '\v'
          [0x0C] ( 12) FF:  Form Feed        '\f' (new page)
          [0x0D] ( 13) CR:  Carrige Return   '\r' (return left)
          [0x1B] ( 27) ESC: Escape Character '\'  (UNIX) or '¥' (Windows) | 033 (8-decimal)

          ＊To express literal
          ASCII
          [0x5C] \\: back slash as one character literal
          [0x27] \': single quote as literal
          [0x22] \": double quate as literal, especially used in format string of 'printf()'.
          [0x3F] \?: question mark as literal, which often use for operator at another context.
         
          ＊For decimal value
          \ooo: One to three numbers with Escape-Character '\', express 8-decimal Literal.
          \x00: 16-decimal Literal

*@subject ◆Back-Space '\b' 〔CAnsiYH p21〕
          If you push [Backspace] on Keyboard, Cursol go back and delete one character there.
          But if you want to express backspace by using '\b', Cursol go back only, often do not delete,
          depending on your PC environment.
          In this case, author of CAnsiYH said, "Try to write '\b \b', and may do well".
          
*@subject ◆String text Litral 〔CAnsiYH p21〕
          ・Multi-character Literal as String text is expressed enclosing by double quote [" "].
          ・String Type in [Java][C#], is not existed in C.
          ・String text defined as static char array in C, for example below.
          ・'\0' NULL Character express the end of String text, automatically inserted by Compiler 

          [Example] These express the same sense Literal.
          char* nameP = "Sophia";
          static char name[] = { 'S', 'o', 'p', 'h', 'i', 'a', '\0' };

          [Example] String text can include white-space and Escape-Sequence in double quote " ".
          char* str = "She is a girl.\n";
          char* str2 = "She is a girl whose name is \"Sophia\".\n";

*@subject ◆Concat multi String texts
          ・We can concat two String texts by " " or doing line feed only. 
          ・Compiler concat a String Literal and the neighbour String Literal, and recognize them as one.
          ・It is not necessary to write with "+", as [Java][C#].
          ・One String Literal concated two, is automatically inserted '\0' at the last termination.

          [Example]
          printf("She is a girl. "
            "Her name is Sophia.\n"
          );

*@subject ◆Enumeration constant => 〔CAnsiYH p44 | Chapter 3〕

*@subject ■ Identifier 〔CAnsiYH p23〕
          ・Identifier: name of Function, Variable, or Struct
          ・These are available characters on Identifier:
          |  A |  B |  C |  D |  E |  F |  G |  H |  I |  J |  K |  L |  M |
          |  N |  O |  P |  Q |  R |  S |  T |  U |  V |  W |  X |  Y |  Z |
          |  a |  b |  c |  d |  e |  f |  g |  h |  i |  j |  k |  l |  m |
          |  n |  o |  p |  q |  r |  s |  t |  u |  v |  w |  x |  y |  z |
          |  0 |  1 |  2 |  3 |  4 |  5 |  6 |  7 |  8 |  9 |
          |  _ |

          ・Numeric characters cannot be used at top of Identifier, but can do middle or bottom.
          ・[ _ ] under-score should not be used at top of Identifier, 
            because it is often used as reserved words of external library or extending specification of C;
            at middle, it can be used as delimiter of word for being readable.
          ・That the first 31 characters (96 Bytes?) can be identified at least, is ensured by specification of C.
            The maximum character number of Identifier depends on Compiler which you use.

          ★As a programming custom, name of Function and Variable is often written by lower-case first.
          ★As same, name of constant value defined by '#define' Directive, is often written by upper-case whole.
          ★Identifier should be name obviously to make sense of straging type or value.

*@subject ◆Reserved Words (This is often called "Keyword" in C.) 〔CAnsiYH p25〕〔C99YH 0C | p442〕
          Reserved Word already has been defined and used by the specification of C.
          It cannot be used as Identifier (= name).
          If you use it, you will be thrown Compile Error. 

*@subject ■ Scope
          ・Scope: A recognizable and referable range of Variable.
          ・It is the range about name (= Identifier), not about value of Variable.
          ・If same names are conflicted, the priority of Variable is superior of inner than outer.
            The inner Variable cover and hide outer, it is called "concealment".
            so that the consealment can be easy to manage the program, but be worse readable.
          ★Therefore, as a basic art of programming, it is told that "Define as inner as possible",
            to prevent to be consealed by else Variable.

          [Kinds of Scope]
          ・File Scope:      The definition which be made out of Block, Function, Argument, 
                             can be recognized and refered in whole file after there.
          ・Block Scope:     The definition which be made in Block, Function, Argument,
                             can be recognized and refered only in the Block after there;
                             expressed by bracket '{ }' as Block delimitter.
                             In nested Block as like '{ { } }' case, the definition in inner can do only inner after there,
                             for example: 'for', while', 'if', 'switch' statement.

          ・Prototype Scope: The Argument name of Function or Stuct Declaration can do only in Block whole,
                             as similar to Block Scope.

          ・Function Scope: (Label Scope):
                            Label: A named Label expressed by 'xxxx:', is the target place of 'go to' statement.
                            It can do in the Function whole, not only after location of Label also before there.

*@subject ■ Linkage
          ・Linkage: A qualifier expressing relation between Variables or Function names,
                     to prevent to conflict them across files, as like 'main.c' and 'print.c'.

          ・When another files compile each, link them, and yield one Execute File;
            A Variable 'foo' used in them, need be the same one. 
            For that, each Identifier 'foo' in each files, need have External Linkage,
            If either of them have Internal Linkage, the 'foo' is different Variable, even if the name is same.

          [Kinds of Linkage]
          External Linkage: The Identifier of Variable and Function with qualifier of this, 
                            can be recognized and refered in whole of Program (includeing another files).
          Internal Linkage: They with this, can do in the File only.

          [Qualifier] The usage is to write this additionally, before Identifier or Return Type of Function.
          extern: qualifier expressed External Linkage, of cause out of the Block, even if in the Block.

          static: qualifier expressed Internal Linkage. of cause in the Block, even if out of the Block.

          (No Qualifier): 
            If the Identifier is defined out of the Block, it always has External Linkage, excepting 'static'.
            If it is done in the Block, it has usually Internal Linkage, excepting 'extern' or next.

            Though it is declarated as 'extern' somewhere, if the definition as No Qualifier in the Block,
            it has no Linkage, and it will be thrown Compile Error, because of "Unresolved externals" below.

            "Unresolved externals":
            Declaration 'extern' is done, so that you tell Compiler to use the Identifier which is defined somewhere out of there.
            Nevertheless, when Linker in Compiler do link to the Definition, there is it nowhere.
            So Liker said "The Declaration 'extern' is unreloved, where is the Definition ? ".

            The often reason of "Unresolved externals":
            ・Because you mistake the spelling of Identifier.
            ・Because when Compile, you do without link of necessary file or library. 
            ・Because you forget to change comment-out of the Definition to alive.

*@subject ■ Various Name
          Label: A named Label expressed by 'xxxx:', is the target place of 'go to' statement.
                 Label need add with statement.
                 if you want to jump to before '}', named Label put empty statement.

                 [Example]
                 void function() {
                 
                    end: 
                 }
                 
          Name-space: Group of namespace
                      If a Identifier is in the same scope and in different namespace,
                      you can use the same Identifier.
                      Of cause, if it is in the same scope and namespace, you cannot use it.

          [Kinds of Namespace]
          ・Name of Variable, Function, Alius defined by 'typedef()', and constant value in enum.
          ・Name of Label as the target place of 'go to' statement.
          ・Name of Tag (struct, union, enum) and Member of 'struct', 'union'.
             └ In addition, 
               Tag and Tag need be different names, even if these type are different as like 'struct' and 'union'.
               Tag and Member need be different names, even which these Block are same or different.
               Member and Member of different Block, can be the same name.

    [EOF]