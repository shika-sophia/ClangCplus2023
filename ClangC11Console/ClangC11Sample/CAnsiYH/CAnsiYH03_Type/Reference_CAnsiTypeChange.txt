/**
*@directory ClangC11Console / ClanC11Sample / CAnsiYH / CAnsiYH03_Type
*@fileName  Reference_CAnsiTypeChange.txt
*@reference C99YH    結城 浩 『C言語プログラミングレッスン [入門編] 第３版』SB Creative, 2019
*@reference CAnsiYH  結城 浩 『C言語プログラミングレッスン [文法編] 新版』  SB Creative, 2006
*@reference C11DS    arton  『独習 C 新版』翔泳社, 2018
*@reference MTYH     結城 浩 『Java言語で学ぶデザインパターン入力 [マルチスレッド編] 増補改訂版』SB Creative, 2012
(meaning    YUUKI Hiroshi   『Primer of Design Patterns learned by Java language [Multi-Thread Book] Compensated Revision Edition』SB Creative, 2012)

*@content CAnsiYH Chapter 3  Type | Type-Change / p55-65
*@summary Reference_CAnsiTypeChange.txt
          [Summary]
          ■ Type-Change 〔p55〕
            ◆Cast Type-Change             (explicitly)
            ◆Arithmetic Type-Change       (implicitly)
            ◆Assign Type-Change           (implicitly)
            ◆Calling Function Type-Change (implicitly)
            ◆Compare Type-Change          (implicitly)

          ◆Type Qualifier 'const'
            ◎[Difference of 'const' and '#define']
          ◎['const' and Pointer]
          ◎['const' and Pointer] with Cast

          ◆Type Qualifier 'volatile'
          [Compiler Optimization]
          [Memory Model in Java] =>〔JVM Memory Model | MTYH 51, p608〕

*@English [E] cast      (n/v):     出演, 鋳造   | [P] 明示的な型変換
          [E] explicit  (adj):     明示的  <->  implicit (adj)  暗黙的
          [E] prefer      (v):     優先する  =:=  expedite (v), prioritize (v)　|  preferential (adj)  優先的 
          [E] opposite  (adj):     反対, 逆, 向かい, 正反対, 向かい 側, 対向
          [E] conclusion  (n):     結論  =:=  consquence (n) 結果, 帰結
          [E] regard      (v):     点, 考えて, みなす, 見なす, に関して, 敬意
          [E] omit      (n/v):     抜かす、省く
          [E] abbreviate  (v):     省略する、短縮する   | abbreviation (n) 省略形
          [E] complicate  (v):     複雑にする
          [E] conflict  (n/v):     競合, 紛争, 対立, 衝突, 矛盾, 葛藤
          [E] immutable (adj):     不変  <->  mutable (adj) 可変 
          [E] assign     (v):      割り当てる、代入する  | assignment (n)
          [E] replace    (v):      置換する             | replacement (n)
          [E] appropriate (adj):   適した、適切
          [E] restrict   (v):      制限する, 限定する, 規制する | restriction (n) | restrictive (adj)
          [E] constrain  (v):      制限する, 制約する, 拘束する, 抑止, 強いる  | constraint (n)
          [E] moderate  (adj):     適当, やや, 緩やか, 中程度, 程よく =:= arbitrary (adj) <-> strict (adj), subtle (adj)
          [E] arbitrary (adj):     任意, 随意, 恣意的
          [E] strict    (adj):     厳密, 厳しく, 固く, 厳格, 厳重, あくまで
          [E] intention  (n):      意図    intend (v)  | contemplate (v) 意図する、企図する、熟視する
          [E] deprecated(adj):     非推奨、廃止された  <->  recommended (adj) 推奨された
          [E] optimize   (v):      最適化する, 最大限  | optimization (n) | optimal (adj)
          [E] suspend    (v):      停止する、中断する
          [E] collective term:     総称, 一括, まとめ

          ＊Programming
          [P] definition  (n):     定義
          [P] declaration (n):     宣言, プロトタイプ宣言
          [P] operator    (n):     演算子
          [P] operand     (n):     被演算数 (= 演算子により計算される数値)  | opeland (n)
          [P] qualifier   (n):     修飾子
          [P] volatile  (adj):     頻繁に値が変化する  | [E] 揮発性の、変わりやすい
          ＊Mathematics
          [M] Arithmetic  (n):     算術, 演算, 算数, 算術演算, 算数科  | Arithmetical (adj)

*@see 
*@author  shika
*@date    2023-01-25
*/ 

*@subject ■ Type-Change 〔p55〕
          Type-Change: Type can be changed from initially-defined Type, 
                       with the context or with necessary.
                       It is done, explicitly (= enforcely) or implicitly (= automatically).

          [Causes of Type-Change]
          ・By Cast Operator'(Type)':  explicitly Type-change.
          ・By Arithmetic Operator:    implicitly Type-change at the time of calucurate.
          ・By Compare Operator:       implicitly Type-Change when conditional expression is compared.
          ・By Assign Operator:        implicitly Type-Change when Variable is assigned the value.
          ・By Calling Function:       implicitly Type-Change when Function is called with giving the Argument.                                        

*@subject ◆Cast Type-Change (explicitly)
          Cast: When we want, Type can be changed explicitly, by Cast Operator '(Type)' before the expression.
                
          [Format]
          (Type) expression

          [Example]
          ＊char -> int
          n = (int) c;   // assuming char c, int n.
                         
          In this case, It is Assign Operator implicitly Type-Change, too.
          so that we can write that:

          n = c;

          ＊int -> long
          long mega = (long) n;
          long mega = 512L;
          long mega = (long) 512 * 1024;

          Though the priority of Operator is superior Arithmetic Operator '*' than Cast '(long)'.
          because Type-Change is done before calculate, 
          the expression '(long) 512 * 1024' means to do Cast about '512' only. 
          not only Type-Change int 512 -> long 512, also int 1024 -> long 1024, 
          and they are calculated.

          => more detail ◆Athemetic Type-Change〔below〕

          ＊void* -> struct SchoolMate*
          typedef struct SchoolMate { ... } MATE;
          ----
          void *p;
          MATE *mateP;

          p = malloc(size);
          mateP = (MATE*) p;

          ★How to find Type name of Cast: 〔p56〕
          At first, imagine the definition expression of the Variable.
          And then, delete the Variable name from it.

          [Example] Pointer which indicate Variable 'result' as  Return Value of Function 'int func()':
          At first, imagine the definition expression.
            int *result;
             ↓
          And then, delete the Variable name.         
            int* 
             ↓
          This is Type name of Cast.
            result = (int*) func();

*@subject ◆Arithmetic Type-Change (implicitly)
          Arithmetic Type-Change: 
            At the time of calculation, if Operand Types are different, 
            Type-Change is done before culculation, and then calculation is done by same Types.

            Operand / Opeland: The numeric value which is calculated by Operator.

          [How to Type-Change] in specification of C language
          This is described as 'if-statement' of C code in original. 
          But I will write it by human language here, as following the Text Book 〔CAnsiYH〕.
            
            [Summary]
            The Type which has more wide range in Operands, is preferred.
            Whole of Operands are changed to its Type. 
            and the solution of calculation is its Type, too.
            
            [Superior Priority] Type which has more wide range
            (superior)  long double -- double -- float -- unsigned long int -- unsigned int -- long int -- int  (inferior)
            
            [next Superior Priority] value than sign
            (superior)   unsigned  -- signed   (inferior)

            [if-statement] How to Type-Change is decided by this.

                if ( Either Operands are 'long double' Type) {
                   Whole of Operands are changed to 'long double' Type;
                }
                else if ( Either Operands are 'double' Type ) {
                   Whole of Operands are changed to 'double' Type;
                }
                else if ( Either Operands are 'float' Type ) {
                   Whole of Operands are changed to 'float' Type;
                }
                else if ( Either Operands are 'unsigned long int' Type ) {
                   Whole of Operands are changed to 'unsigned long int' Type;
                }
                else if ( Either Operands are 'unsigned int' Type ) {
                   Whole of Operands are changed to 'unsigned int' Type;
                }
                else if ( Either Operands are 'long int' Type ) {
                   Whole of Operands are changed to 'long int' Type;
                }
                else if ( Either Operands are 'int' Type ) {
                   Whole of Operands are changed to 'int' Type;
                }

             【Notation】'long int' and 'unsigned int'
              Comparing the range of them in the Compiler,
              the Type which has more wide range, is superior priority. 

*@subject ◆Compare Type-Change (implicitly)
          Compare Type-Change: The Type-Change which is implicitly done,
                               before comparing conditional expression in 'if', 'switch', 'for', or 'while' statement.
         
          [Example] Failure Example about Compare Type-Change
          unsigned int zero = 0;
          int count = 10;

          while (count >= zero) {
            count--;
          }

          In this case, the program will behave eternal loop.
          because when 'count' and 'zero' values are compared,
          before comparision, these value are Type-Changed to more wide range Type (= unsigned int).
          So when 'count == -1', before comparision, it is Type-Changed to 'unsigned int' and the value is to be 0.
          Then compare in 'while (count >= zero)', '0 >= 0' is true, do next iteration 'count--;'.
          When 'count == -2', as same ...
          Consequently, the program will behave eternal loop.

          That will be solved by that the 'zero' is defined as 'int'. 

*@subject ◆Assign Type-Change (implicitly)
          Assign Type-Change: 
              Type-Change which is implicitly done, 
              in the case that these are different Types, the left and right side of Assign Operator '=',
              at the time of assignment.

              [Java][C#]
              Type-Change can be done, as addition above to that, 
              in the case only that the left side Type as being assigned value, is more wide range than right side Type as expression or value.
              In the opposite case that the left is more narrow range than the right, the Type-Change is not done implicitly,
              or it is required to Cast explicitly, to tell Compiler that it is safe Type-Change.
              The word "safe" means that Programmer know and can accept the possibility of Lack of Binary Digit, happened by Type-Change.
              If you write the code without Cast explicitly in narrow assignment case, 
              you will be thrown Compile Error, because of different-Types or unsafe of the range.

              [Example]
              int narrow = 0;
              long wide = narrow;      // Type-Chage is done implicitly, int -> long.

              long wide = 0L;
              int narrow = wide;       // [C] No problem, still this.
                                       // But it is possible to be happen Lack of Binary Digit by the Type-Change.
                                          => see [Lack of Binary Digit] 〔Reference_CAnsiType.txt〕

              int narrow = (int) wide; // [Java][C#] need Cast explicitly.

*@subject ◆Calling Function Type-Change (implicitly)
          [Definition]
          formal argument: The Argument of Definition Function.
                           The word "formal" means that actual value is un-determined yet.
                           The actual value is determined at the time of Calling Function.
          actual argument: The Argument which is given the value form origin of calling,
                           at the time of Calling Function.

          Calling Function Type-Change:
              At the time of Calling Function, Caller-Function give some values (or nothing in case 'void') as Argument for Called-Function.
              Then in Called-Function, Local Variables are initialized by value of the given-Argument,
              so that the initialization means as same as Assignment the value to the defined-Argument Type,
              Therefore Calling Function bring on Assign Type-Change.

              The Type-Change is implicitly done,
              only in the case that: Type defined by formal Argument, is different from Type given by actual Argument.

          [Example]
          ＊Definition Function
          <string.h>
            └ char* strcpy(char* to, const char* from)   // [×] C11 Compile Error because of "unsafe"

          ＊Calling Function
          char buffer[256];
          strcpy(buffer, "Hello World");

          In this case, Assign Type-Change is impicitly done such as:
          strcpy((char*) buffer, (const char*)"Hello World");

*@subject ◆Type Qualifier 'const' 
          Type Qualifier: The Qualifier which is used with Type Declaration and Definition,
                          and which specify some sense to the qualified Type.
          const: ・The keyword come from C++, it is abbreviation of "constant".
                 ・It means to be not able to modify anything and assign again, excepting at the time of Definition with initialization.,
                   so that the qualified Variable (= Type) can be regarded as like constant value.
                   so that 'const' can protect expected-immutable Variable from unexpected-assignment, that is called "safe program".
                   so that it is almost similar to '#define xxxx constant_value'.

                 ◎[Difference of 'const' and '#define']
                   The word "almost" above means that:
                   ・In '#define' case, the scope is automatically replaced the constant value from top to end of the file,
                     but 'const' case,  the scope is within the Block only, such as Function or statement where it is defined, after there.
                   ・In '#define' case, Address Operator '&' of Pointer is not available,
                     but 'const' case, '&' is available.

                 ・'const' can be used by itself only, in this case, it means 'const int'.
                 ・'const' can be used with member in 'struct'.
                 ・The qualified Type cannot be assign again, but can be initialized the value only.
                 
                 [Format]
                 const Type Variable_name = Initial_value;

                 [Example]
                 const int no_good = -1;
                 const char version[] = "Version 1.0";

*@advance ◎['const' and Pointer]
          ・A program of which we use both 'const' and Pointer,
            is to be safe from modify and conflict value, but complicated the definition.
          ・The word "safe" means that:
            'const' can protect expected-immutable Variable from unexpected-assignment, that is called "safe program".
            We should add 'const' appropriately, so that Compiler can find out unexpected-assignment.

          [Example]
          ＊Integer Valiable
          Three Variables are defined as 123, below. 
          Though the location of 'const' is different, both are the same meaning.

          int        i = 123;  //mutable Variable
          const int ci = 123;  //immutable Variable as like constant value
          int const ic = 123;  //immutable Variable as like constant value

          ＊Pointer
          Four Pointers below which indicate int Variable 'i', is initialized by address '&i' of 'i'.

          int        *iP = &i;  // (1)
          const int *ciP = &i;  // (2)
          int const *icP = &i;  // (3)
          int* const iPc = &i;  // (4)

          The 'const' means that:
          (1)    Variable 'iP' is not added 'const', so it is normal Pointer which indicate 'i'.
          (2)(3) Variable 'ciP' and 'icP' are the same meaning, both are Pointer which indicate 'const int'.
          so that both cannot be assigned and modified such as:
              *ciP = 123;  // [×] invalid assignment of any other value, even if the value is the same.
              (*icP)++;    // [×] invalid modification, because it is immutable, by being defined as 'const'.
          Consequently, int value which Pointer indicate, cannot be modified.

          But Pointer value can be modified such as:
              ciP = &j;   // [〇] Pointer 'ciP' is assigned another address of 'int j'.
              icP++;      // [〇] Address of Pointer 'icP' is incremented.

          (4) Variable 'iPc' is 'const Pointer' which indicate int Variable 'i'.
          The value which Pointer indicate, can be assigned and modified 
          The Pointer value cannot be done, such as:
              *iPc = 123;  // [〇] correct assignment
              (*iPc)++;    // [〇] correct modification
              iPc = &j;    // [×] invalid assignment
              iPc++;       // [×] invalid modification
          Threrefore, (4) is the opposite conclusion from (2)(3).

          ＊Most complicated pattern:
          [Example]
          const int* const ciPc = &i; // (5)
          int const* const icPc = &i; // (6)

          (5)(6) Both are the same meaning, 'const Pointer' which indicate 'const int' Variable,
          so that the value which Pointer indicate, cannot be assigned and modified,
          so that Pointer value cannot be done, neither.

*@advance ◎['const' and Pointer] with Cast
          [Example]
          const int ci = 123;   
          const int ciP = &ci;  // It is Pointer which indicate const int Variable 'ci'.
          int i = 456;
          int *iP;              // It is normal Pointer which indicate int Variable 'i'.

          ciP = iP;             // [〇] 'ciP' can be assigned more moderate restriction 'iP than itself.  
          iP = ciP;             // [×]  'iP' cannot be assigned more strict restriction 'ciP' than itself.
          iP = (int*) ciP;      // [〇]　By using Cast 'const int*' -> 'int*', that can be done.
          
          Consquently, 'const' protect Variable from unexpected-assignment,
          Compiler cannot allow to break the restriciton of 'const'.
          Though, by using Cast, it allow that,
          but considering the original intention of 'const', the Cast as above is deprecated for program safety.

*@subject ◆Type Qualifier 'volatile'
          volatile: the orignal sense as English is "frequently variable", and
                    the specific sense as programming word is to suspend Compiler Optimization.

                    By adding 'volatile', 
                    operations which a program can read or write or modify a data, do as described by source code,
                    so that a data can be read and written most recent value,
                    but the operations are possible to delay more.

                    'volatile' is used in the case of Multi-Thread Execution.

          [Compiler Optimization]
          The operations which Compiler adjust original source code to optimize Memory management,
          such as 're-order' which the order of expression is substituted former and later, 
          such as 'visibility' which because Compiler modify the storage area as below,
          the most recent value of a data is not always referred correctly in Multi-Thread Execution.

          "Compiler modify the storage area" is that: (Refering [Memory Model in Java], below)
             If a data is not modified anything in this source code,
             the data is normally read from Cache Area by Compiler Optimization, 
             but it is not always most recent value.

             If the program is Single-Thread Execution case, that is no problem.
             But Multi-Thread Execution case, that is possible to happen data-conflict (= called "Data Race").
             Adding 'volatile' only, the data is read and written form/to Heap Area.
            
            [Memory Model in Java] =>〔JVM Memory Model | MTYH 51, p608〕
            ・Heap Area = Shared Memory, Common Memory
                Whole of Threads commonly use and share there.
                It storage insatance, field (= global variable), and Array.
                When Program execute 'new', Memory space of the instance is taken the place in this Memory.

            ・Stack Area
                Each Thread has the Memory space one by one, to storage the definition of local variable and formal argument.

            ・Cache Area
                It is the collective term of temporary memory, including CPU-cache, register-cache, Thread-cache.
                The initial value is copied from Heap Area, and
                the value which is modified in program and assigned again, is temporarily storaged here.
                
*@advance ◎Example of 'volatile'
          [Example]
          void wait_ready(void) {
              volatile char *vp = (volatile char)(0x12345678);

              for(;;) {
                  if (*vp & 1) { break; }
              }//for loop
          }

          The self-defined Function 'wait_ready()' continue to read I/O port "0x12345678" (= address) in Memory,
          and though there is not expression which modify the value of '*vp' in this source code,
          (probably, there is the expression in another source file, the judge only is done here.)
          continue to wait until the most low bit of the read value is equal to 1. ('&' is Bit Caluculate Operator).

          Not adding 'volatile',
          the initialized value of '*vp' is storaged in register-cache,
          and the initial value is continued to be read from register-cache in for-statement, by Compiler Optimization,
          because the value is not modified in this source code,
          even if the value could be modified in another source file.
          Such as like that:

              void wait_ready(void) {
                  char tempChar = *vp;

                  for(;;) {
                      if (tempChar & 1) { break; }
                  }//for loop
              }

           In this case, the program continue to read the initial value,
           and for-statement is never finished, and to be eternal loop.

           By adding 'volatile', 
           we can tell Compiler to suspend "Compiler Optimization", and 
           Compiler read the recent value from Heap Area, every times,
           though Compiler has already known that value of '*vp' is not modified in this source code.

[EOF]