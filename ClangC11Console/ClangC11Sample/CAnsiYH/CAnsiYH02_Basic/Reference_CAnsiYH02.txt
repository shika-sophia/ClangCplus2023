/**
*@directory ClangC11Console / ClanC11Sample / CAnsiYH / CAnsiYH02_Basic
*@fileName  Reference_CAnsiYH02.txt
*@copyFrom  MainAsciiCharacterViewer.c
*@copyFrom 
*@author    shika
*@date      2023-01-17
*/ 

*@content CAnsiYH Chapter 2  Basic | ASCII Character / List 2-0 / p13
*@summary MainAsciiCharacterViewer.c
*@English [M] exponete:  éwêî

*@subject ÅüASCII Code ChartÅkC99YH 0AÅl
*         I drew it as similar, below.
*         It is opposite Horizontal and Vertical Axis to Chart ofÅkC99YH 0AÅl
* 
*         The usage of Chart that you can know this charater code value (16-decimal), 
*         by adding both value of Horizontal and Vertical.
* 
*         You can output to Console, by using 'printf()'
* 
*         [Example]
*         int c;             It should be defined as 'int', not 'char'.
*         printf("%X", c);   %X or %x show 16-decimal value.
*         printf("%d", c);   %d show 10-decimal value.
*         printf("%c", c);   %c show character.

ÅüASCII Code Chart (Edited)ÅkMainAsciiCharacterViewer.cÅl
--------------------------------------------------------------------------------------
| -- | 00 | 01 | 02 | 03 | 04 | 05 | 06 | 07 | 08 | 09 | 0A | 0B | 0C | 0D | 0E | 0F |
|----|----|----|----|----|----|----|----|----|----|----|----|----|----|----|----|----|
| 00 | NUL| SOH| STX| ETX| EOT| ENQ| ACK| BEL| BS | HT | LF | VF | FF | CR | SO | SI |
| 10 | DLE| DC1| DC2| DC3| DC4| NAK| SYN| ETB| CAN| EM | SUB| ESC| FS | GS | RS | US |
| 20 | SP |  ! |  " |  # |  $ |  % |  & |  ' |  ( |  ) |  * |  + |  , |  - |  . |  / |
| 30 |  0 |  1 |  2 |  3 |  4 |  5 |  6 |  7 |  8 |  9 |  : |  ; |  < |  = |  > |  ? |
| 40 |  @ |  A |  B |  C |  D |  E |  F |  G |  H |  I |  J |  K |  L |  M |  N |  O |
| 50 |  P |  Q |  R |  S |  T |  U |  V |  W |  X |  Y |  Z |  [ |  \ |  ] |  ^ |  _ |
| 60 |  ` |  a |  b |  c |  d |  e |  f |  g |  h |  i |  j |  k |  l |  m |  n |  o |
| 70 |  p |  q |  r |  s |  t |  u |  v |  w |  x |  y |  z |  { |  | |  } |  ~ | DEL|
--------------------------------------------------------------------------------------

ÅüNon-Characters (Edited)ÅkMainAsciiCharacterViewer.cÅl
  ÅkReferenceDocument\Article_AsciiCode_Clanguage.txtÅl
[00] (  0) NUL: NULL Character '\0'
[01] (  1) SOH: Start of Header
[02] (  2) STX: Start of Text
[03] (  3) ETX: End of Text
[04] (  4) EOT: End of Transfer
[05] (  5) ENQ: End of Quatation (= Reference from others)
[06] (  6) ACK: Accept OK
[07] (  7) BEL: Bell (= Beep)  '\a'
[08] (  8) BS:  Back Space     '\b'
[09] (  9) HT:  Horizontal Tab '\t'
[0A] ( 10) LF:  Line Feed      '\n' (new line)
[0B] ( 11) VT:  Vertical Tab   '\v'
[0C] ( 12) FF:  Form Feed      '\f' (new page)
[0D] ( 13) CR:  Carrige Return '\r' (return left)
[0E] ( 14) SO:  Shift out
[0F] ( 15) SI:  Shift in
[10] ( 16) DLE: Data Link Escape
[11] ( 17) DC1: Device Control 1
[12] ( 18) DC2: Device Control 2
[13] ( 19) DC3: Device Control 3
[14] ( 20) DC4: Device Control 4
[15] ( 21) NAK: NG Accept (= Failure of Accept)
[16] ( 22) SYN: Synchronize
[17] ( 23) ETB: End of Transfer Block
[18] ( 24) CAN: Cancel
[19] ( 25) EM:  End of Media
[1A] ( 26) SUB: Substitute
[1B] ( 27) ESC: Escape [ESC]
[1C] ( 28) FS:  Form Separetor   (= Delimiter)
[1D] ( 29) GS:  Group Separetor  (= Delimiter)
[1E] ( 30) RS:  Record Separetor (= Delimiter)
[1F] ( 31) US:  Unit Separetor   (= Delimiter)
[20] ( 32) SP:  white-space
  :
[7F] (127) DEL: Delete [DEL]

*@subject ÅüCharacter Code ÅkMainAsciiCharacterViewer.cÅl
*         It is defined corresponding Binary which is recognizable for Machine, to Character which is recognizable for Human.
*         There are some kinds of Character Code as below.
* 
*         ASCII: Character code default-defined by the specification of C language,
*                depending on Compiler.
* 
*         UTF-8: (Unicode):
*                Character code of most popular in the world,
*                which almost supports main languages;
*                including ASCII, 2Bytes Character, Japanese, Arabic, Hebrew, Greek, or Kiril etc...
* 
*         ECU:   (Latin1): 
*                Character code for UNIX: alphabet, numeric, symbol charater only, 
*                but including pronounce-characters and accent-characters of European languages, Euro currency mark too.
*                Probably, Git-Hub automatically may judge Character-Code as ECU.
*                It might change Non-Characters and Japanese to [?].
*                Visual Studio (UTF-8) shows correctly.
* 
*         Shift-JIS: (windows-31J, CP932):
*                Character code for Japanese, as Windows default in Japan.
*

*@content CAnsiYH Chapter 2  Basic |  / List - / p13-
*@summary Reference_CAnsiYH02.txt
*@subject ÅüNot using characters in C language
          $, @, ` (back Quate)
          @: sometimes use to express an unique extended specification.

*@subject ÅüSuffix (and Prefix) for expessing the Literal type
          f, F:  Floating-point numbers (10-decimal Expression),  as like '3.1415'
          e, E:  Floating-point numbers (Exponential Expression), as like '1,17e+306
      [Å~] d, D:  (not existed for double suffix) It should be defined as like 'double d = 0.0;'
          l, L:  long int, long double (Å¶below)
          (Prefix) L: wide-character as like 2 Bytes character, as like L'äø', L'éö'.
          u, U:  unsigned 

          Å¶ "l, 1, I, i, | " are likely to be confused. So should use 'L', not 'l'.

          Å¶ Font [ Consolas ] in Windows default Font, can obviously distiguish these confusable characters,
             as like [0 o O] [l 1 I i, |] [. , ; :].  ( <- After changing Font of your environment, See here.)
             It seems for me to be appropriate for a Programmer Font, I usually use this.
             But if you use [Consolas] with 2 Bytes characters, because it is based on ECU (Latin1),
             2 Bytes characters are expressed as MS-Gothic, which cannot distinguish wide-characters of [0 O] [ÇO Çn] as well.

*@subject ÅüWhite-Space: Compiler recognize these as white-space.
          ÅEwhite-space
          ÅELine Feeds  '\n', '\r', '\f'
          ÅETab         '\t', '\v'
          ÅEComment-out /* */, //

          (Excluding white-space in constant value of 'char', it is used as delimiter.)
          (Excliding white-space in String text expressed with "")
          (Excluding "Å@" Blank of 2 Bytes character)

*@subject ÅüConnector [ \ ] of two Lines
          At termination of the line, if you write with '\',
          Compiler recognize two lines of previous and next '\', as one line.
          
          [Example] ÅkCAnsiYH p253Ål
          #define DPRINT(x) \
          if (debug) { \
              printf( ... ); \
              printf( ... ); \
          }

*@subject Åü
